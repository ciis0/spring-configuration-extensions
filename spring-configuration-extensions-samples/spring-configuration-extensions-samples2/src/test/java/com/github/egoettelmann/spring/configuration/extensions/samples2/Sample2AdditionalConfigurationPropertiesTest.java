package com.github.egoettelmann.spring.configuration.extensions.samples2;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.github.fge.jsonpatch.diff.JsonDiff;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.springframework.util.ResourceUtils;

import java.io.File;

public class Sample2AdditionalConfigurationPropertiesTest {

    /**
     * Verifies the metadata generated by the {@link com.github.egoettelmann.spring.configuration.extensions.annotationprocessor.value.ValueAnnotationProcessor}`
     * Checks that `META-INF/additional-spring-configuration-metadata.json` matches `additional-spring-configuration-metadata-test-sample2.json`.
     *
     * @throws Exception any kind of error
     */
    @Test
    public void testAdditionalConfigurationProperties() throws Exception {
        final File generatedFile = ResourceUtils.getFile("classpath:META-INF/additional-spring-configuration-metadata.json");
        Assertions.assertTrue(generatedFile.exists(), "Additional configuration metadata file should exist");
        final JsonNode generatedJsonNode = new ObjectMapper().readTree(generatedFile);
        Assertions.assertTrue(generatedJsonNode.has("properties"), "No field 'properties' found");
        final JsonNode generatedProperties = generatedJsonNode.get("properties");

        final File expectedFile = ResourceUtils.getFile("classpath:additional-spring-configuration-metadata-test-sample2.json");
        final JsonNode expectedJsonNode = new ObjectMapper().readTree(expectedFile);
        final JsonNode expectedProperties = expectedJsonNode.get("properties");

        final JsonNode jsonPatch = JsonDiff.asJson(expectedProperties, generatedProperties);
        Assertions.assertTrue(jsonPatch.isArray(), "Patch should be an array");
        Assertions.assertEquals(0, jsonPatch.size(), "Patch should be empty");
    }

    @Test
    public void testAdditional4ValueConfigurationProperties() throws Exception {
        final File generatedFile = ResourceUtils.getFile("classpath:META-INF/additional4value-spring-configuration-metadata.json");
        Assertions.assertTrue(generatedFile.exists(), "Additional configuration metadata file should exist");
        final JsonNode generatedJsonNode = new ObjectMapper().readTree(generatedFile);
        Assertions.assertTrue(generatedJsonNode.has("properties"), "No field 'properties' found");
        final JsonNode generatedProperties = generatedJsonNode.get("properties");

        final File expectedFile = ResourceUtils.getFile("classpath:additional4value-spring-configuration-metadata-test-sample2.json");
        final JsonNode expectedJsonNode = new ObjectMapper().readTree(expectedFile);
        final JsonNode expectedProperties = expectedJsonNode.get("properties");

        final JsonNode jsonPatch = JsonDiff.asJson(expectedProperties, generatedProperties);
        Assertions.assertTrue(jsonPatch.isArray(), "Patch should be an array");
        Assertions.assertEquals(0, jsonPatch.size(), "Patch should be empty");
    }

}
